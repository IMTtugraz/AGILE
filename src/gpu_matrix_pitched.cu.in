// Copyright (C) 2010-2011 Institute of Medical Engineering,
// Graz University of Technology
//
// This program is free software; you can redistribute it and/or modify it under
// the terms of the GNU General Public License as published by the Free Software
// Foundation; either version 3 of the License, or (at your option) any later
// version.
//
// This program is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
// or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
// more details.
//
// You should have received a copy of the GNU General Public License along with
// this program; if not, see <http://www.gnu.org/licenses>.

// $Id$

@AutoWarning@

#define TType1IsComplex @TType1IsComplex@
#define TType2IsComplex @TType2IsComplex@

#include "agile/gpu_config.hpp"
#include "agile/gpu_type_traits.hpp"
#include <cuda.h>

// Unfortunately, textures have to have file scope, which is why we have to
// use this ugly preprocessor definitions.
#define AGILE_TEXTURE agile_matrix_texture_@FType1@@FType2@
texture<agile::to_tuple_type<@TType1@ >::texture_type> AGILE_TEXTURE;

#define AGILE_TEXTURE_2D agile_matrix_texture_2d_@FType1@@FType2@
texture<agile::to_tuple_type<@TType1@ >::texture_type, 2> AGILE_TEXTURE_2D;

#include "gpu_matrix_pitched.ipp"

namespace agile
{
  template void multiply<@TType1@, @TType2@ >(
    const GPUMatrixPitched<@TType1@ >& A, const GPUVector<@TType2@ >& x,
    GPUVector<typename promote<@TType1@, @TType2@ >::type>& y);

  template void multiply<@TType1@, @TType2@ >(
    const GPUVector<@TType1@ >& x, const GPUMatrixPitched<@TType2@ >& A,
    GPUVector<typename promote<@TType1@, @TType2@ >::type>& y);

  template void multiplyElementwise<@TType1@, @TType2@ >(
    const GPUMatrixPitched<@TType1@ >& A, const GPUMatrixPitched<@TType2@ >& B,
    GPUMatrixPitched<typename promote<@TType1@, @TType2@ >::type>& Z);

  template void scale<@TType1@, @TType2@ >(
    const @TType1@& alpha, const GPUMatrixPitched<@TType2@ >& A,
    GPUMatrixPitched<typename promote<@TType1@, @TType2@ >::type>& B);

#if !TType2IsComplex

  // second type may not be complex because, complex is already in signature
  template void interp2d<@TType1@, @TType2@ >(
    const GPUMatrixPitched<@TType1@ >& M,
    const GPUVector<std::complex<@TType2@ > >& pos,
    GPUVector<@TType1@ >& res);

#endif  // TType2IsComplex

} // namespace agile

// End of $Id: gpu_matrix.cu.in 376 2010-02-11 13:16:45Z freiberger $.
