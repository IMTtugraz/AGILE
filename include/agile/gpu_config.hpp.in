// Copyright (C) 2010-2011 Institute of Medical Engineering,
// Graz University of Technology
//
// This program is free software; you can redistribute it and/or modify it under
// the terms of the GNU General Public License as published by the Free Software
// Foundation; either version 3 of the License, or (at your option) any later
// version.
//
// This program is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
// or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
// more details.
//
// You should have received a copy of the GNU General Public License along with
// this program; if not, see <http://www.gnu.org/licenses>.

// $Id: gpu_config.hpp.in 452 2011-05-31 12:00:18Z freiberger $

#ifndef AGILE_GPU_CONFIG_HPP
#define AGILE_GPU_CONFIG_HPP

/*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
            Run CMake to generate gpu_config.hpp from this file.
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/

#include <cstdio>

namespace agile
{
  typedef unsigned uint32;
  typedef unsigned long long uint64;

  const unsigned CRS_BLOCK_SIZE = 64;

  //! The maximum number of threads a block can ever have independent of the
  //! device. This constant can be used inside kernels, where it is not
  //! possible to allocate memory dynamically. GPUEnvironment ensures to
  //! limit the maximum amount of threads per block to this constant.
  const unsigned MAX_NUM_THREADS_PER_BLOCK = 512;

  //! This is the same constant as \p MAX_NUM_THREADS_PER_BLOCK except that
  //! it applies to two dimensions. \p MAX_NUM_THREADS_PER_BLOCK_DIM2 is set
  //! such that its square does not exceed \p MAX_NUM_THREADS_PER_BLOCK.
  const unsigned MAX_NUM_THREADS_PER_BLOCK_DIM2 = 16;

}  // namespace agile


//! \brief Error check macro by Gerald Buchgraber.
#define CUDA_SAFE_CALL_NO_SYNC(call)                     \
{                                                        \
   cudaError_t err = call;                               \
   if (err != cudaSuccess)                               \
     printf("CUDA error in file '%s' in line %i: %s.\n", \
       __FILE__, __LINE__, cudaGetErrorString(err));     \
}

#define CUDA_SAFE_CALL(call) CUDA_SAFE_CALL_NO_SYNC(call);


//! \brief Error check for CUBLAS added by Andreas Huber.
#define CUBLAS_SAFE_CALL(call)                            \
{                                                         \
    cublasStatus_t stat = call;                             \
    if(stat != CUBLAS_STATUS_SUCCESS)                     \
    {                                                     \
      printf("CUBLAS error in file '%s' in line %i.\n",   \
      __FILE__, __LINE__);                                \
    }                                                     \
}                                                         \

/* Define as 1 if you have MPI. */
#cmakedefine HAVE_MPI

#endif // AGILE_GPU_CONFIG_HPP

// End of $Id: gpu_config.hpp.in 452 2011-05-31 12:00:18Z freiberger $.
